import random
import numpy as np
import math
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

# Ben Williams '25
# benjamin.r.williams.25@dartmouth.edu or roaf676@gmail.com
# Randomized Algorithms, May 2nd, 2023
# Implementation of a potentially bad, unique fingerprinting scheme
# Result: It is bad. Pair (0, highly composite number), and you can get consistent fail rates >50%

# Success :=(a != b) and (a % r != b % r)
# Fail := (a != b) and (a % r == b % r)


# Creates random pairs of two random integers between 1 and 2^n and tries experiment (attempts) number of times
# Returns the fail rate
# If wanted, prints out the expected number of guarenteed fails (when r = 1), and total fails
def random_ab_experiment(n, attempts, print_info=False):
    success = 0
    fail = 0
    failed_rs = []
    for i in range(attempts):
        # Picks some random integers that are unequal to eachother
        a = random.randint(0, 2 ** (n - 1))
        b = random.randint(0, 2 ** (n - 1))
        while b == a:
            b = random.randint(0, 2 ** (n - 1))
        r = random.randint(1, 2*n)

        if a % r == b % r:
            fail += 1
            failed_rs.append(r)
        else:
            success += 1
    if print_info:
        print(failed_rs)
        print("Expected Guarenteed Fails: " + str(attempts/(2*n)))
        print("Success: " + str(success) + " Fail: " + str(fail))
    return fail / attempts


# Loops through all possible unique non-equal pairs from 1 to 2^n
# Can print out the dictionary of the all pairs and can print out the worst pair and its respective fail rate
# Returns the worst pair and its fail rate
def deterministic_ab_experiment(n, attempts, print_info=False):
    pairs_fail = dict()

    # Loop through all possible (2^n choose 2) pairs
    for a in range(0, 2**(n - 1)):
        for b in range(0, 2**(n - 1)):
            # No duplicates/opposites
            if pairs_fail.get((b, a)) is not None or a == b:
                continue
            success = 0
            fail = 0
            for i in range(attempts):
                r = random.randint(1, 2*n)
                if a % r == b % r:
                    fail += 1
                else:
                    success += 1
            pairs_fail[(a,b)] = fail / attempts

    worst_pair = None
    worst_fail_rate = 0
    for key in pairs_fail.keys():
        if pairs_fail[key] > worst_fail_rate:
            worst_fail_rate = pairs_fail[key]
            worst_pair = key
    if print_info:
        print(pairs_fail)
        print(worst_pair, worst_fail_rate)
    return worst_pair, worst_fail_rate


# Returns the worst possible pair from 1 -> 2^n with the highest fail rate
# Essentially just runs more trials on deterministic_experiment
def find_worst_pair(n, print_info=False):
    pair_counts = dict()

    # Run deterministic experiment 100 times
    for i in range(100):
        result = deterministic_ab_experiment(n, 100)
        if pair_counts.get(result[0]) is not None:
            pair_counts[result[0]] = (pair_counts[result[0]][0] + 1, pair_counts[result[0]][1] + result[1])
        else:
            pair_counts[result[0]] = (1, result[1])

    # Find the worst pair in the dictionary
    very_worst_pair = None
    very_worst_fail_occurrence = 0
    for key in pair_counts.keys():
        if pair_counts[key][0] > very_worst_fail_occurrence:
            very_worst_fail_occurrence = pair_counts[key][0]
            very_worst_pair = key

    # Printing info optional
    if print_info:
        print(very_worst_pair, pair_counts[very_worst_pair][1] / pair_counts[very_worst_pair][0], very_worst_fail_occurrence)
        print(pair_counts)
    return very_worst_pair


# Experiment with only one pair
# Returns the fail rate
def input_ab_experiment_rand(Tuple,n,attempts, print_info=False):
    success = 0
    fail = 0
    for i in range(attempts):
        r = random.randint(1, 2*n)

        # If mods are equal despite a != b, we fail
        if Tuple[0] % r == Tuple[1] % r:
            fail += 1
        else:
            success += 1

    # Printing info optional
    if print_info:
        print(Tuple, fail / attempts)
    return fail / attempts


# Tries every possible combination for the tuple, returns fail rate
def input_ab_experiment_deterministic(Tuple,n, print_info=False):
    success = 0
    fail = 0
    for i in range(2*n):
        r = i + 1

        # If mods are equal despite a != b, we fail
        if Tuple[0] % r == Tuple[1] % r:
            fail += 1
        else:
            success += 1

    # Printing info optional
    if print_info:
        print(Tuple, fail / 2*n)
    return fail / (2*n)


# Returns the list of numbers that the algorithm works on
# This is for trying to "optimize" HCNs. We want to make these numbers not work anymore
def find_succeeds_2n(Tuple, n):
    succeed_nums = []

    for i in range(2 * n):
        r = i + 1

        # If mods are equal despite a != b, we fail
        if Tuple[0] % r != Tuple[1] % r:
            succeed_nums.append(r)

    return succeed_nums


# Charts the fail rate for one way collusion, ie (0, 1), (0, 2) .... (0, 2^n - 1)
def chart_fail_rate(n):
    indices = []
    fail_rates = []
    sum = 0
    for trial in range(1, 2**(n)-1):
        indices.append(trial)
        fail_rates.append(input_ab_experiment_deterministic((0, trial), n, False) * 100)
        sum += fail_rates[trial - 1]

    plot = plt.subplot2grid((2, 2), (0, 0), rowspan=2, colspan=2)
    plot.plot(indices, fail_rates)
    plot.set_title(f'Factors <= 2n : Probability of failure for n = {n}')
    plot.set_xlabel("Values of b up to 2^n - 1")
    plot.yaxis.set_major_formatter(mtick.PercentFormatter())
    plot.set_ylabel("Percentage of numbers <= 2n as factors")
    plt.show()
    print(f'Average fail rate = {(sum / (2**n -1)):.3f}%')


chart_fail_rate(6)


#find_worst_pair(6, True)
# input_ab_experiment((0,60), 7, 10000000, True)
# input_ab_experiment((1,61), 7, 10000000, True)
# input_ab_experiment((2,62), 7, 10000000, True)
# input_ab_experiment((3,63), 7, 10000000, True)
# input_ab_experiment((4,64), 7, 10000000, True)
#input_ab_experiment((0,60), 6, 10000000, True)
#input_ab_experiment((0,120), 7, 10000000, True)
#print((1 - random_ab_experiment(100, 1000000, False)) * 100)
#input_ab_experiment((0, 240), 8, 1000000, True)
#print(input_ab_experiment((0, 39071701313114214879628184670759569266031639745817491556464211347320926269645913711458545637294948731761028645375189338620943571218240226997464414871940687294856422413980922355336120929596467126912459161311337451164709912658920975991107070304661273060670243869265060750786972047900408381321302636949160316549599045968878267261103059075978556739268199310141428373658786793451702189298338601069071614601309023587863777980349990020079780304542812183970407075046128476245231462400000), 1594, 10000000, True))
#print(input_ab_experiment((0, 18320059112463372915743218788380394025088955124650484851400061739332641442232197235539680348703278350280520288236773107176009309566865620180072299030462306225422086178421857757782137186790785420289496995691643846249991222377961722374601995060447394343883814455798162393108458123145346567309254284463020672650287014001367513527099124820161090155646231765704695149192194318758631546629266381110449530784283362760470512475808228337349315261265236704885718509728986877587477291917518270590589572362044803209694169613690746724762845380837366023799181605077268003239207843420326961014671065328980647108185940374887031187920035184019958761693761735808622144115258683324317956290838272290805103454209299048584098913933282845407836859846796991113334231318471637536495800358640673028218517466778453340975220277439222086272815163590775303354674381982354919256198167345283360591824076874439138940383445094791433552851914922298460228099818421874106759177027684296699149957114656327036508366995848408085543681061280312566148429953466530678004411619002356721572908626533620342233988426717369484768237833028413431945339823761521160159694194955877470647340288158975472227255526239907735601806122345829282602268538875154663467630361703501997904766489811617150208001022559772451717158372938546281554021088379208363238922387338141500924185230963077055045797117539265572446151139459909787589710350754305083011760707731172904880794200591378066929864867198806921635622901050806752279369990060237336692262064474313155437876177171887010441751698228176859389950169780416976110459923153528726987671875818655655974226136952559601210629524764365275659317081129923007552141583616708669628331256823148397777395281836021576355610714433305600012353367193585328984480186459821423981264612676390318317878738819091803516153703414916280457273253066369025879858692130195311682328893904586272969666405167576432940201395909748976985248132806130224650226068072748627005633870801688429419954697950168371681236731905338433524971402160789141670991160940777544264958974963616879529709453495736635663084605275097829221275236844650504274827643276176595908055780760692809673217938039079334820196254053127280526825829313237415713829730039434542237733848926735696174125021156554228554976702481953061384082839138201045684276330204761473742427816221649487415045209359438773653119672451030594243684549760630499843343561087148558607570038549318274694841905075229028595467718805250918972774636107374898486955961963669189655813734068851244306201993424713601453925629556585953304369901291102453072851623392973674944658858182772836149326948605026064292129003913853696917904429343650971550340465085144890850658372712417377089330634333915202320369518176455843679998339226170635158525109571436741346994466167435591943319586529748528067719055139210731856550687290097018956873034249029718030244882094840285141544196050967893594850953395879215642393137392643804031203817963367274948677980860888598067701463848738461009605108684392560426217979210028185443553633788369202839552, 1000)))

#random_ab_experiment(8, 1000, True)
# 18320059112463372915743218788380394025088955124650484851400061739332641442232197235539680348703278350280520288236773107176009309566865620180072299030462306225422086178421857757782137186790785420289496995691643846249991222377961722374601995060447394343883814455798162393108458123145346567309254284463020672650287014001367513527099124820161090155646231765704695149192194318758631546629266381110449530784283362760470512475808228337349315261265236704885718509728986877587477291917518270590589572362044803209694169613690746724762845380837366023799181605077268003239207843420326961014671065328980647108185940374887031187920035184019958761693761735808622144115258683324317956290838272290805103454209299048584098913933282845407836859846796991113334231318471637536495800358640673028218517466778453340975220277439222086272815163590775303354674381982354919256198167345283360591824076874439138940383445094791433552851914922298460228099818421874106759177027684296699149957114656327036508366995848408085543681061280312566148429953466530678004411619002356721572908626533620342233988426717369484768237833028413431945339823761521160159694194955877470647340288158975472227255526239907735601806122345829282602268538875154663467630361703501997904766489811617150208001022559772451717158372938546281554021088379208363238922387338141500924185230963077055045797117539265572446151139459909787589710350754305083011760707731172904880794200591378066929864867198806921635622901050806752279369990060237336692262064474313155437876177171887010441751698228176859389950169780416976110459923153528726987671875818655655974226136952559601210629524764365275659317081129923007552141583616708669628331256823148397777395281836021576355610714433305600012353367193585328984480186459821423981264612676390318317878738819091803516153703414916280457273253066369025879858692130195311682328893904586272969666405167576432940201395909748976985248132806130224650226068072748627005633870801688429419954697950168371681236731905338433524971402160789141670991160940777544264958974963616879529709453495736635663084605275097829221275236844650504274827643276176595908055780760692809673217938039079334820196254053127280526825829313237415713829730039434542237733848926735696174125021156554228554976702481953061384082839138201045684276330204761473742427816221649487415045209359438773653119672451030594243684549760630499843343561087148558607570038549318274694841905075229028595467718805250918972774636107374898486955961963669189655813734068851244306201993424713601453925629556585953304369901291102453072851623392973674944658858182772836149326948605026064292129003913853696917904429343650971550340465085144890850658372712417377089330634333915202320369518176455843679998339226170635158525109571436741346994466167435591943319586529748528067719055139210731856550687290097018956873034249029718030244882094840285141544196050967893594850953395879215642393137392643804031203817963367274948677980860888598067701463848738461009605108684392560426217979210028185443553633788369202839552

